p1: implement static table-based scheduler
p2: validation/verification/use-case            ->   have examples to show that the scheduler works (imagine that the buttons are 
                                                    supposed to be a sensor of a machine that gives the input to our program)


every 100 ms (for example) there has to be a task that awakens the scheduler











possibilities:
we need a function to add a task to the system
we need a function to start the scheduler and maybe stop it too
a function to print the contents of the table



The macro-cycle can be used to reset the clock of the system, so we can prevent the overflow of the clock


To schedule:
    - create list of tasks, ordered by period
    

How to schedule:
    - save in each task the ticks in which they will be executed
    or
    - create a structure that has the tick and the tasks that will be executed in that tick 
(also add the number of tasks that will be executed in that tick)

    - the tasks have to be ordered by priority. If the priority is the same, order by period (aka num of ticks)

ex: [[1],[1,0],[1,2],[1],[1,2,3]] -> 
    1st tick: task 1; 
    2nd tick: task 1 and 0; 
    3rd tick: task 1 and 2; 
    4th tick: task 1; 
    5th tick: task 1, 2 and 3